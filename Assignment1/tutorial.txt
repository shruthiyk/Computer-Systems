
This is a tutorial to explain some commands used in shell script
The commands are explained with an example each. There is small script at the end which is an attempt to include a couple of search tasks to automate the file search process. 


Following is the list of commands with explaination and examples ,used in this program:
1. # !/bin/bash specifies that the command should be always run in bash, 
  even though this line starts with '#' which comments the line, it is an excpetion here. 

2. # is used to comment any line. anything written against # will not be executed when the program is run nor be displayed on the terminal.
example: # this is an example script
         # 2+2

3. echo : this command is used to print any content on the terminal. Echo is used multiple times in this program to print the content whenever necessary.
example:  echo "hello"
output :  hello 

4. ls : this command is used to list the files in the specified path
example : linux@virtualbox:~/Desktop$ls 
output : all the files will be listed in alphabetical order (by default)

5. variation(s) of ls :
ls -t " path" : 
path refers to any path or directory that the user specifies.
this command lists the files sorted by latest modification date, most recently updated files appear first and so on...

ls -F | grep '*$' : this command lists only the executable files
*$ indicates any files that are executable 

6. grep: This command is used to find the specified pattern in the given file
example : grep -i apple fruits.text 
output :finds apple in the fruits file (-i indicates case insensitve)

7. read: this command reads one line from the standard input and assigns it to a variable 
example :echo " enter your favorite color:" 
                read input 
		echo "$input" 
output: enter your favorite color : yellow
        yellow

8. if : this command checks whether the condition is met or not and executes any command that satisfies the condition
if [condition] 
	statement 
else 
	statement 
fi  
example: if [ -z "$String" ]
         echo "string is empty" 
	 else
	 echo "string is not empty"
output: string is empty ( if the condition is met)

9. find : searches the directories for the mentioned option
example :find . -type f -empty 
output: searches and displays the list of files which are empty 

10. $parameter: this command prints the value assigned to the parameter 
example :for i in 'seq 1 20'
	do
echo $i
	done 
output: 1 2 3 .......20

here i has value from 1 to 20, $i prints each of this value to the terminal

11. cat:  this command is used to print the content of the specified file on the terminal
example : cat animals 
output: 
cat 
dog 
elephant 


12. && : is AND operator , this runs command two only if command one is executed succesfully
example: 
if [ x ] && [ Y ]; then 
	echo " hi" 
else
	exit
output : hi ( if the first condition is met and then the second one too)

-------------------------------------------------------------------------------------------------------------------------
Script and it's explaination: kindly read through the comments while understanding the script. Refer to the above
mentioned commands again. Also refer man pages for more details on each command. 

link to man page: https://linux.die.net/man/1/find for find command. 
use the website to find out more about other commands too.  
or 
type man (command name) on the terminal
example: man find
-------------------------------------------------------------------------------------------------------------------------

#!/bin/bash
#assignment 1 - Tutorial on using commands in a shell script 

echo "Below is the list of files on the system"

echo "-------------------------------------------"

ls ~ # lists the files in the root 

echo "-------------------------------------------"

echo " Kindly enter the name of the owner whose files that you want to see: "  # prompts the user to enter the name

read input  # reads the standard input provided by the user

find -user "$input" -ls  # finds and displays files owned by the specified user

echo " Do you want to see only the executable files? y/n" # prompts the users for yes(y) or no(n) 

read input2 

if [ "$input2" = "y" ] ; then  # checks whether the condition holds good and executes the next statement if it matches the input provided in the line above

ls -F | grep '*$'    # lists all the executable files

else        

exit        # if the condition does not match then exit

fi	    # end if

echo "enter a file name to see the content: " 

read filename

        if [ -e "$filename" ] && [ -s "$filename" ] ; then    # compares two conditions. if the file exists and the file size is > 0 then go to next command

        cat $filename    # prints the content of the file that the user specified.

        else

        echo "the file does not exists or is empty"  # if the conditions fails this statement is printed on the terminal

        fi   # end if 

# by default the program exits
