This is a tutorial to explain some commands used in shell script
The commands are explained with an example where we try to solve a non-trivial but a simple problem statement. 

Below is the script and explaination of each command following the command used

Following is the list of other commands with explaination and examples ,used in this program:
1. # !/bin/bash specifies that the command should be always run in bash, 
  even though this line starts with '#' which comments the line, it is an excpetion here. 

2. # is used to comment any line. Hence the above line is not executed i.e the content does not appear on the shell when script is executed.

3. echo : this command is used to print any content on the terminal when the program is executed. Echo is used multiple times in this program to print the content whenever necessary.
example:  echo "hello"
output :  hello 

4. ls : this command is used to list the files in the specified path
example : linux@virtualbox:~/Desktop$ls 
output : all the files will be listed in alphabetical order (by default)

5. variation(s) of ls :
ls -t " path" : 
path refers to any path or directory that the user specifies.
this command list the files sorted in order when they were modified, the most recently updated files appears first and so on...

ls -F | grep '*$' : this command list only the executable files

6. grep: This command is used to find the specified pattern in the given file
example : grep -i apple fruits.text 
output :finds apple in the fruits file (-i indicates case insensitve)

7. read: this command reads the one line from the standard input and assigns it to a variable 
example : read input 

8. if : this command checks whether the condition is met or not and executes any command that satisfies the condition
if [condition] 
	statement 
else 
	statement 
fi  
example: if [ -z "$String" ]
         echo "string is empty" 
	 else
	 echo "string is not empty"
output: string is empty ( if the condition is met)

9. for: this command iterates through the resultant list once for each member
example :for i in 'seq 1 20'
	do
echo $i
	done 
output: 1 2 3 .......20

10. $parameter: this command prints the value assigned to the parameter 
example :for i in 'seq 1 20'
	do
echo $i
	done 
output: 1 2 3 .......20

here i has value from 1 to 20, $i prints each of this value to the terminal

11. cat:  this command is used to print the content of the specified file on the terminal
example : cat animals 
output: 
cat 
dog 
elephant

12. && : is AND operator , this runs command two only if command one is executed succesfully
example: 
if [ x ] && [ Y ]; then 
	echo " hi" 
else
	exit
output : hi ( if the first condition is met and then the second one too)

----explaination of the program

#!/bin/bash 

#Assignment 1 - Tutorial on using commands in a shell script 

echo "Below is the list of files on the path that you have specified. 
The list shows the recent most updated files first" 

echo "-------------------------------------------"

ls -t /home/shruthi/Desktop/ # specify the respective path

echo "-------------------------------------------"

echo " do you want to list only the executable files? y/n : "  # prompt for user input

read input  # reads the standard input provided by the user

if [ "$input" = "y" ] ; then  # checks whether the user entered yes

ls -F | grep '*$'   # prints only executable files to terminal

else 

exit # if no exist the program

fi

echo "enter a file name: "   # prompts the user to input any of the file name from the list

read filename # takes the file name

	if [ -f "$filename" ] && [ -s "$filename" ]; then # if it's file and the size is not zero 

	for var in $(cat $filename)

	do 

	echo " $var"   # prints the content ( variable in each line)

	done 
	
	else 
	
	echo " the file is empty"  # if file is empty then prints this line

fi

Following is the explaination of each command used in the script above.



